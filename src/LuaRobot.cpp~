#include "WPILib.h"
/*#include "lua/lua.h"
#include "lua/lauxlib.h"
#include "lua/lualib.h"*/
#include "lua/lua.hpp"

extern "C" {
void luaopen_WPILib(lua_State*);
}

class LuaRobot : public IterativeRobot {
private:
  lua_State *luastate;
virtual void RobotInit() {
SmartDashboard::PutBoolean("luaConsole_fresh", false);
SmartDashboard::PutString("luaConsole_input", "");
  LuaRobot::luastate = luaL_newstate();
luaL_openlibs(LuaRobot::luastate);
luaopen_WPILib(LuaRobot::luastate);
luaL_dostring(LuaRobot::luastate, "print(\"hello from lua\"); DisabledInit = function() print(\"hello from lua DisabledInit\") end");
}

virtual void AutonomousInit() {
//autonomousCommand->Start();
}

virtual void AutonomousPeriodic() {
//Scheduler::GetInstance()->Run();
}

virtual void TeleopInit() {
  lua_pushglobaltable(luastate);
  lua_getfield(luastate, -1, "TeleopInit");
  lua_remove(luastate, -2);
  lua_pcall(luastate, 0, 0, 0);
}

virtual void TeleopPeriodic() {
  lua_pushglobaltable(luastate);
  lua_getfield(luastate, -1, "TeleopPeriodic");
  lua_remove(luastate, -2);
  lua_pcall(luastate, 0, 0, 0);
  //Scheduler::GetInstance()->Run();
}

virtual void TestPeriodic() {
//lw->Run();
}

virtual void DisabledInit() {
lua_pushglobaltable(luastate);
lua_getfield(luastate, -1, "DisabledInit");
lua_pcall(luastate, 0, 0, 0);
}

virtual void DisabledPeriodic() {
if (SmartDashboard::GetBoolean("luaConsole_fresh")) {
cout << "lua> " << SmartDashboard::GetString("luaConsole_input") << "\n";
 int errorcode = luaL_dostring(LuaRobot::luastate, SmartDashboard::GetString("luaConsole_input").c_str());
 cout << "error code: " << errorcode << "\n";
 if (errorcode > 0) {
   cout << "error message: " << lua_tolstring(luastate, -1, NULL) << "\n";
   lua_settop(luastate, 0);
 }
SmartDashboard::PutBoolean("luaConsole_fresh", false);
}
}

};

START_ROBOT_CLASS(LuaRobot);
